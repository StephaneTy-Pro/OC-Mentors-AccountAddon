

/*!
 * Immediately Invoked Function Expression Boilerplate
 * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com
 */
;(function () {

    'use strict';

    // Code goes here...

    /* with info from
    	https://github.com/VagnerDomingues/docsify-example-panels/blob/master/dist/docsify-example-panels.js
    */

    /**
     *
     * Sample implementation
     *	[h5bt-embed](6725) add https://h5p.org/arithmetic-quiz
     *
     *	TODO : add param (with, height as in h5p)
     *
     * version 0.1  initial
     * version 0.2  add multi test on a page
     *
     *
     */

    var h5btInteg = function(hook,vm){



    	var h5btUserOptions = vm.config.h5bt || {};
    	var h5bt = true;

		// by using a regexp object we could implement other tag by example not embeded

    	var regex = {
    		markup : /\[h5bt\-embed\]\((.+)\)/mg,
    	}


    	// Called when the script starts running, only trigger once, no arguments,
    	/*
    	hook.init(function() {
    		// ...
    	});
		*/

    	// Invoked each time before parsing the Markdown file.
    	// Note Stt strange form here perhaps another docsify version https://github.com/mrpotatoes/docsify-github-embed/blob/master/src/index.js
    	hook.beforeEach(function(content) {
    		var hasMarkup = false;
        	// ...			console.log(`hook beforeEach ${content})`);


      		hasMarkup = regex.markup.test(content);
      		// /!\When a regex has the global flag set, test() will advance the lastIndex of the regex.
      		regex.markup.lastIndex = 0
      		if(hasMarkup){
				var m;
				var aNeedle = [];
				// generated by https://regex101.com/codegen?language=javascript
				while ((aNeedle = regex.markup.exec(content)) !== null) {
					var sLink = "";
					// This is necessary to avoid infinite loops with zero-width matches

					if (aNeedle.index === regex.markup.lastIndex) {
						regex.markup.lastIndex++;
					}

					// The result can be accessed through the `aNeedle`-variable.
					aNeedle.forEach((match, groupIndex) => {
						//console.log(`Found match, group ${groupIndex}: ${match}`);
					});
					// because of regexp aNeedle[1] could'nt be null
					sLink="<iframe src=\"https://h5p.org/h5p/embed/"+aNeedle[1]+"\" width=\"1090\" height=\"645\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe><script src=\"https://h5p.org/sites/all/modules/h5p/library/js/h5p-resizer.js\" charset=\"UTF-8\"></script>`";
					content = content.replace(aNeedle[0], sLink);
				}
      		}

        	return content;
      	});

		// found at https://github.com/mrpotatoes/docsify-github-embed/blob/master/src/index.js


        // Invoked each time after the Markdown file is parsed.
        // beforeEach and afterEach support asynchronousã€‚
		/*
		hook.afterEach(function(html, next) {
		    // ...
		    // call `next(html)` when task is done.
		    //console.log(`hook afterEach ${html})`);
		    next(html);
		});
		*/
		// Invoked each time after the data is fully loaded, no arguments,
		/*
		hook.doneEach(function() {
			// ...
			//console.log(`hook doneEach`);
		});
		*/
		// Called after initial completion. Only trigger once, no arguments.
		/*
      	hook.mounted(function() {
        	// ...
      	});
		*/
		// Called after initial completion, no arguments.
		/*
      	hook.ready(function() {
        	// ...
        	//console.log(`hook ready`);
      	});
		*/
    return h5btInteg;

    }
	// connect plugin to list of loaded plugins
	if (window) {
		window.$docsify = window.$docsify || {};
		window.$docsify.plugins = (window.$docsify.plugins || []).concat(h5btInteg);
		}


})();

